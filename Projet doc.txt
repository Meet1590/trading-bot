1> Initialized repo using VS codes GUI on the 4th icon in rop left corner
    -> Tried to create new branch named DEV using command pallate but showed,
        FATAL error as follows'HEAD' is not a commit and a branch 'dev' cannot be created from it
    Solution: Therefore I created Porject doc text file and commiting it with a first message.

2> Created dev branch using command pallate - (All branch name should be in lowercase for maintainability purpose)
    -> 2nd commit in main branch with updated text file.

    Observation: When I observed after above steps I found that dev branch contains replica of main branch when it was created,
                    it does not have any changes or commits I did on main branch after the creation operation. As I can conclude,
                    if you commit on a different branch then it would not impact any other branch.

Branching:
        Main - This branch will serve as a source code for the trading robot (Production)
        Dev  - This branch will be used for the development purpose, code playground.
        Test - This branch will be used for testing purpose as a copy of dev branch
    Any other sub branches that are created will be written down below with name and purpose.


3> After writing above ccontent I tried to checkout to dev branch but is showed warning that I should do one of the following,
        1> Stash and Checkout - Temp. save uncommited but staged changes which can be restored later on.
        2> Migrate & Checkout - Update the dev branch with the updated copy from main.
        3> Force Checkout - Discard all local changes, file in the main will be replaced with the file in dev.

    I Stashed all the changes and checked-out to dev branch.

For this project, we will use GitFlow work-flow because of following reasonns,
    - Simple for bigginers
    - scaled easily
    - keeps 'main' branch stable

    Branching Structure, 

    Main Branches:
        2 Main branches that will always be in the repo,
            1> main - Stable production ready version
            2> dev - active dev branch where new features will be continously integrated and tested before copying into main.

    Feature-specific Branches:
        Seperate branch for separate feature will be created and merged into dev branch when completed.
            Example:
                feature/data-source -> Featches data from APIs
                feature/preprocessing -> Cleans and transforms raw data

    Release & Hotfix Branches (More advanced: At the time of scaling):
            release/v1.0 - For preparing satble release version
            hotfix/fix-api-bug - for urgent fixes to production issues in main branch

    Workflow:

    Create feature branches from develop as required using following comand,
        git checkout -b feature/<branch-name> - each branch represents individual feature.

        -> after working on that feature locally commit the feature and push it to the related feature branch using following commands,

        git add . (Adds all the changes into staging area)
        git commit -m "Message you want to type"
        git push origin feature/<branch-name> - pushing local branch content to remote located at origin

        -> After pushing it to origin, merge that branch into dev when it is ready, to do that do the following steps,

        git checkout dev - checkout to dev branch
        git merge feature/<branch-name> - Merge the feature with existing code in dev branch (Merge conflict resolution)
        git push origin dev - Pushing updated dev branch to remote repo on GitHub located at origin.

        -> If merge is successful and you do not need extra branch then delete feature/<branch-name>,
        git branch -d feature/<branch-name> - It deletes the branch from local repo
        git push origin --delete feature//<branch-name> - Deletes branch from remote repo

        -> If develop is stable at some point, merge it into main branch to enhance the production functionality
        git checkout main - changing branch to main
        git merge dev - merge dev into main locally
        git push origin main - updates main branch located at remote origin with locally updated main

4> Creation of Remote repository and pushing local onto remote.
    Created repo online on GitHub
    Addedd origin in local using following command - 'git remote add origin https://github.com/Meet1590/trading-bot.git
    verify origin using - 'git remote -v'
    checkout branches which you want to push to remote and type - 'git push origin <branch-name>'

5> Pull request - Making pull request is useful while merging changes from remote branch to local branch.
    They are used to communicate changes to a branch in a repository. Once it is opened, code changes can be reviewed with
    colabs and add commits.

    It display the differences/diffs between the content in the source branch and content in target branch.

